name: Android CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      # üîπ Build apenas Debug (sem assinar)
      - name: Build (lint + unit tests)
        run: ./gradlew clean buildDebug

      # üîπ Gera APK de debug (para teste)
      - name: Assemble Debug APK
        run: ./gradlew assembleDebug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk

      # üîë Recria a keystore no ambiente do GitHub Actions
      - name: Decode Keystore
        run: |
          echo "${{ secrets.MYAPP_KEYSTORE_BASE64 }}" | base64 --decode > /home/runner/keystore.jks
        shell: bash

      # üîç Confere o alias dentro da keystore
      - name: Verify Keystore Alias
        run: |
          keytool -list -v -keystore /home/runner/keystore.jks -storepass ${{ secrets.MYAPP_KEYSTORE_PASSWORD }}

      # üîπ Gera o AAB assinado
      - name: Assemble Release AAB
        run: |
          ./gradlew bundleRelease \
            -PMYAPP_KEYSTORE=/home/runner/keystore.jks \
            -PMYAPP_KEYSTORE_PASSWORD=${{ secrets.MYAPP_KEYSTORE_PASSWORD }} \
            -PMYAPP_KEY_ALIAS=${{ secrets.MYAPP_KEY_ALIAS }} \
            -PMYAPP_KEY_PASSWORD=$
